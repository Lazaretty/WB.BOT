// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WB.DAL;

#nullable disable

namespace WB.DAL.Migrations
{
    [DbContext(typeof(WbContext))]
    [Migration("20221210135308_AddSaleInfo")]
    partial class AddSaleInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WB.DAL.Models.ChatState", b =>
                {
                    b.Property<long>("ChatStateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatStateId"));

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("UserChatId")
                        .HasColumnType("bigint");

                    b.HasKey("ChatStateId");

                    b.ToTable("ChatStates");
                });

            modelBuilder.Entity("WB.DAL.Models.SalesInfo", b =>
                {
                    b.Property<long>("SaleInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SaleInfoId"));

                    b.Property<string>("Articul")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Income")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("SaleDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserChatId")
                        .HasColumnType("bigint");

                    b.HasKey("SaleInfoId");

                    b.ToTable("SalesInfos");
                });

            modelBuilder.Entity("WB.DAL.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LastUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("UserChatId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WB.DAL.Models.User", b =>
                {
                    b.HasOne("WB.DAL.Models.ChatState", "ChatState")
                        .WithOne("User")
                        .HasForeignKey("WB.DAL.Models.User", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatState");
                });

            modelBuilder.Entity("WB.DAL.Models.ChatState", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
